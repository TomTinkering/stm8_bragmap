                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Oct  6 2014) (Linux)
                                      4 ; This file was generated Wed Feb 11 23:22:39 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module uart
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _uart_write
                                     14 	.globl _strlen
                                     15 ;--------------------------------------------------------
                                     16 ; ram data
                                     17 ;--------------------------------------------------------
                                     18 	.area DATA
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area INITIALIZED
                                     23 ;--------------------------------------------------------
                                     24 ; Stack segment in internal ram 
                                     25 ;--------------------------------------------------------
                                     26 	.area	SSEG
      000000                         27 __start__stack:
      000000                         28 	.ds	1
                                     29 
                                     30 ;--------------------------------------------------------
                                     31 ; absolute external ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DABS (ABS)
                                     34 ;--------------------------------------------------------
                                     35 ; interrupt vector 
                                     36 ;--------------------------------------------------------
                                     37 	.area HOME
      000000                         38 __interrupt_vect:
      000000 82v00u00u00             39 	int s_GSINIT ;reset
      000004 82 00 00 00             40 	int 0x0000 ;trap
      000008 82 00 00 00             41 	int 0x0000 ;int0
      00000C 82 00 00 00             42 	int 0x0000 ;int1
      000010 82 00 00 00             43 	int 0x0000 ;int2
      000014 82 00 00 00             44 	int 0x0000 ;int3
      000018 82 00 00 00             45 	int 0x0000 ;int4
      00001C 82 00 00 00             46 	int 0x0000 ;int5
      000020 82 00 00 00             47 	int 0x0000 ;int6
      000024 82 00 00 00             48 	int 0x0000 ;int7
      000028 82 00 00 00             49 	int 0x0000 ;int8
      00002C 82 00 00 00             50 	int 0x0000 ;int9
      000030 82 00 00 00             51 	int 0x0000 ;int10
      000034 82 00 00 00             52 	int 0x0000 ;int11
      000038 82 00 00 00             53 	int 0x0000 ;int12
      00003C 82 00 00 00             54 	int 0x0000 ;int13
      000040 82 00 00 00             55 	int 0x0000 ;int14
      000044 82 00 00 00             56 	int 0x0000 ;int15
      000048 82 00 00 00             57 	int 0x0000 ;int16
      00004C 82 00 00 00             58 	int 0x0000 ;int17
      000050 82 00 00 00             59 	int 0x0000 ;int18
      000054 82 00 00 00             60 	int 0x0000 ;int19
      000058 82 00 00 00             61 	int 0x0000 ;int20
      00005C 82 00 00 00             62 	int 0x0000 ;int21
      000060 82 00 00 00             63 	int 0x0000 ;int22
      000064 82 00 00 00             64 	int 0x0000 ;int23
      000068 82 00 00 00             65 	int 0x0000 ;int24
      00006C 82 00 00 00             66 	int 0x0000 ;int25
      000070 82 00 00 00             67 	int 0x0000 ;int26
      000074 82 00 00 00             68 	int 0x0000 ;int27
      000078 82 00 00 00             69 	int 0x0000 ;int28
      00007C 82 00 00 00             70 	int 0x0000 ;int29
                                     71 ;--------------------------------------------------------
                                     72 ; global & static initialisations
                                     73 ;--------------------------------------------------------
                                     74 	.area HOME
                                     75 	.area GSINIT
                                     76 	.area GSFINAL
                                     77 	.area GSINIT
      000000                         78 __sdcc_gs_init_startup:
      000000                         79 __sdcc_init_data:
                                     80 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   81 	ldw x, #l_DATA
      000003 27 07            [ 1]   82 	jreq	00002$
      000005                         83 00001$:
      000005 72 4FuFFuFF      [ 1]   84 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   85 	decw x
      00000A 26 F9            [ 1]   86 	jrne	00001$
      00000C                         87 00002$:
      00000C AEr00r00         [ 2]   88 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   89 	jreq	00004$
      000011                         90 00003$:
      000011 D6uFFuFF         [ 1]   91 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   92 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   93 	decw	x
      000018 26 F7            [ 1]   94 	jrne	00003$
      00001A                         95 00004$:
                                     96 ; stm8_genXINIT() end
                                     97 	.area GSFINAL
      000000 CCr00r80         [ 2]   98 	jp	__sdcc_program_startup
                                     99 ;--------------------------------------------------------
                                    100 ; Home
                                    101 ;--------------------------------------------------------
                                    102 	.area HOME
                                    103 	.area HOME
      000080                        104 __sdcc_program_startup:
      000080 CCr00r3C         [ 2]  105 	jp	_main
                                    106 ;	return from main will return to caller
                                    107 ;--------------------------------------------------------
                                    108 ; code
                                    109 ;--------------------------------------------------------
                                    110 	.area CODE
                                    111 ;	uart.c: 4: int uart_write(const char *str) {
                                    112 ;	-----------------------------------------
                                    113 ;	 function uart_write
                                    114 ;	-----------------------------------------
      000000                        115 _uart_write:
      000000 52 03            [ 2]  116 	sub	sp, #3
                                    117 ;	uart.c: 6: for(i = 0; i < strlen(str); i++) {
      000002 0F 01            [ 1]  118 	clr	(0x01, sp)
      000004                        119 00106$:
      000004 1E 06            [ 2]  120 	ldw	x, (0x06, sp)
      000006 89               [ 2]  121 	pushw	x
      000007 CDr00r00         [ 4]  122 	call	_strlen
      00000A 5B 02            [ 2]  123 	addw	sp, #2
      00000C 1F 02            [ 2]  124 	ldw	(0x02, sp), x
      00000E 7B 01            [ 1]  125 	ld	a, (0x01, sp)
      000010 97               [ 1]  126 	ld	xl, a
      000011 49               [ 1]  127 	rlc	a
      000012 4F               [ 1]  128 	clr	a
      000013 A2 00            [ 1]  129 	sbc	a, #0x00
      000015 95               [ 1]  130 	ld	xh, a
      000016 13 02            [ 2]  131 	cpw	x, (0x02, sp)
      000018 24 17            [ 1]  132 	jrnc	00104$
                                    133 ;	uart.c: 7: while(!(USART1_SR & USART_SR_TXE));
      00001A                        134 00101$:
      00001A AE 52 30         [ 2]  135 	ldw	x, #0x5230
      00001D F6               [ 1]  136 	ld	a, (x)
      00001E 48               [ 1]  137 	sll	a
      00001F 24 F9            [ 1]  138 	jrnc	00101$
                                    139 ;	uart.c: 8: USART1_DR = str[i];
      000021 5F               [ 1]  140 	clrw	x
      000022 7B 01            [ 1]  141 	ld	a, (0x01, sp)
      000024 97               [ 1]  142 	ld	xl, a
      000025 72 FB 06         [ 2]  143 	addw	x, (0x06, sp)
      000028 F6               [ 1]  144 	ld	a, (x)
      000029 AE 52 31         [ 2]  145 	ldw	x, #0x5231
      00002C F7               [ 1]  146 	ld	(x), a
                                    147 ;	uart.c: 6: for(i = 0; i < strlen(str); i++) {
      00002D 0C 01            [ 1]  148 	inc	(0x01, sp)
      00002F 20 D3            [ 2]  149 	jra	00106$
      000031                        150 00104$:
                                    151 ;	uart.c: 10: return(i); // Bytes sent
      000031 7B 01            [ 1]  152 	ld	a, (0x01, sp)
      000033 97               [ 1]  153 	ld	xl, a
      000034 49               [ 1]  154 	rlc	a
      000035 4F               [ 1]  155 	clr	a
      000036 A2 00            [ 1]  156 	sbc	a, #0x00
      000038 95               [ 1]  157 	ld	xh, a
      000039 5B 03            [ 2]  158 	addw	sp, #3
      00003B 81               [ 4]  159 	ret
                                    160 ;	uart.c: 13: int main() {
                                    161 ;	-----------------------------------------
                                    162 ;	 function main
                                    163 ;	-----------------------------------------
      00003C                        164 _main:
                                    165 ;	uart.c: 16: CLK_DIVR = 0x00; // Set the frequency to 16 MHz
      00003C AE 50 C0         [ 2]  166 	ldw	x, #0x50c0
      00003F 7F               [ 1]  167 	clr	(x)
                                    168 ;	uart.c: 17: CLK_PCKENR1 = 0xFF; // Enable peripherals
      000040 AE 50 C3         [ 2]  169 	ldw	x, #0x50c3
      000043 A6 FF            [ 1]  170 	ld	a, #0xff
      000045 F7               [ 1]  171 	ld	(x), a
                                    172 ;	uart.c: 19: PC_DDR = 0x08; // Put TX line on
      000046 AE 50 0C         [ 2]  173 	ldw	x, #0x500c
      000049 A6 08            [ 1]  174 	ld	a, #0x08
      00004B F7               [ 1]  175 	ld	(x), a
                                    176 ;	uart.c: 20: PC_CR1 = 0x08;
      00004C AE 50 0D         [ 2]  177 	ldw	x, #0x500d
      00004F A6 08            [ 1]  178 	ld	a, #0x08
      000051 F7               [ 1]  179 	ld	(x), a
                                    180 ;	uart.c: 22: USART1_CR2 = USART_CR2_TEN; // Allow TX & RX
      000052 AE 52 35         [ 2]  181 	ldw	x, #0x5235
      000055 A6 08            [ 1]  182 	ld	a, #0x08
      000057 F7               [ 1]  183 	ld	(x), a
                                    184 ;	uart.c: 23: USART1_CR3 &= ~(USART_CR3_STOP1 | USART_CR3_STOP2); // 1 stop bit
      000058 AE 52 36         [ 2]  185 	ldw	x, #0x5236
      00005B F6               [ 1]  186 	ld	a, (x)
      00005C A4 CF            [ 1]  187 	and	a, #0xcf
      00005E F7               [ 1]  188 	ld	(x), a
                                    189 ;	uart.c: 24: USART1_BRR2 = 0x03; USART1_BRR1 = 0x68; // 9600 baud
      00005F AE 52 33         [ 2]  190 	ldw	x, #0x5233
      000062 A6 03            [ 1]  191 	ld	a, #0x03
      000064 F7               [ 1]  192 	ld	(x), a
      000065 AE 52 32         [ 2]  193 	ldw	x, #0x5232
      000068 A6 68            [ 1]  194 	ld	a, #0x68
      00006A F7               [ 1]  195 	ld	(x), a
                                    196 ;	uart.c: 26: do {
      00006B                        197 00102$:
                                    198 ;	uart.c: 27: uart_write("Hello World!\n");
      00006B AEr00r91         [ 2]  199 	ldw	x, #___str_0+0
      00006E 89               [ 2]  200 	pushw	x
      00006F CDr00r00         [ 4]  201 	call	_uart_write
      000072 5B 02            [ 2]  202 	addw	sp, #2
                                    203 ;	uart.c: 28: for(i = 0; i < 147456; i++) { } // Sleep
      000074 90 AE 40 00      [ 2]  204 	ldw	y, #0x4000
      000078 AE 00 02         [ 2]  205 	ldw	x, #0x0002
      00007B                        206 00107$:
      00007B 72 A2 00 01      [ 2]  207 	subw	y, #0x0001
      00007F 9F               [ 1]  208 	ld	a, xl
      000080 A2 00            [ 1]  209 	sbc	a, #0x00
      000082 97               [ 1]  210 	ld	xl, a
      000083 9E               [ 1]  211 	ld	a, xh
      000084 A2 00            [ 1]  212 	sbc	a, #0x00
      000086 95               [ 1]  213 	ld	xh, a
      000087 90 5D            [ 2]  214 	tnzw	y
      000089 26 F0            [ 1]  215 	jrne	00107$
      00008B 5D               [ 2]  216 	tnzw	x
      00008C 27 DD            [ 1]  217 	jreq	00102$
                                    218 ;	uart.c: 29: } while(1);
      00008E 20 EB            [ 2]  219 	jra	00107$
      000090 81               [ 4]  220 	ret
                                    221 	.area CODE
      000091                        222 ___str_0:
      000091 48 65 6C 6C 6F 20 57   223 	.ascii "Hello World!"
             6F 72 6C 64 21
      00009D 0A                     224 	.db 0x0A
      00009E 00                     225 	.db 0x00
                                    226 	.area INITIALIZER
                                    227 	.area CABS (ABS)
